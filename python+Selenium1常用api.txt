1.python变量、命名规范、函数、字符串、列表、元组、字典 基本语法结构掌握
2.条件判断循环，面向对象思想、多线程协程（学习廖雪峰python3）电子邮件、访问数据库、网络编程
3、单元测试框架 ：unittest、pytest两个很像，相当于Java中的testng      java语言，整个过程使用PO模式、上传数据时用数据驱动的模式，发邮件。
4.安装： 
https://seleniumhq.github.io/selenium/docs/api/py/#
https://seleniumhq.github.io/selenium/docs/api/py/api.html

Python官网：http://www.python.org/
Python文档下载地址：www.python.org/doc/
1.勾选『Add Python 3.7 to PATH』目的是在环境变量设定的路径中去查找『python.exe』。
2.如果没有勾选，就需要手动添加
在线安装：https://pypi.org/project/selenium/

http://www.jetbrains.com/pycharm/
Community版

5.浏览器驱动的部署
 下载相应的浏览器驱动，geckodriver.exe放在D:\Programs\Python\Python35目录下
https://sites.google.com/a/chromium.org/chromedriver/downloads
https://github.com/mozilla/geckodriver/releases
注意：Selenium，Firefox与geckodriver.exe的版本
from selenium import webdriver# from time import sleepbrowser = webdriver.Firefox()browser.get("http://www.baidu.com")browser.find_element_by_id("kw").send_keys("selenium")browser.find_element_by_id("su").click()
driver.set_window_size(480, 600)//设置浏览器尺寸
driver = webdriver.Firefox()
driver = webdriver.Chrome()
driver.get(second_url)
driver.back()
driver.forward()
driver.refresh()
driver.quit()
#设置浏览器全屏
driver.maximize_window()

6.Python中定位元素的8种方法：跟Java差不多。。
   id、name、class name、Tagname linkText 、partial
 Link Text 、xpath、css selector 

7.举例子
driver.find_element_by_id("kw").send_keys("taobao")driver.find_element_by_name("wd").send_keys("taobao")driver.find_element_by_class_name("s_ipt").send_keys("taobao")driver.find_element_by_css_selector("#kw").send_keys("taobao")driver.find_element_by_xpath("//*[@id='kw']").send_keys("taobao")driver.find_element_by_tag_name("input").send_keys("taobao")driver.find_element_by_link_text("新闻").click()driver.find_element_by_partial_link_text("新").click()
或者使用另外的定位方式
from selenium.webdriver.common.by import By
driver.find_element(By.ID,"kw").send_keys("taobao")
8.复合属性
driver.find_element_by_xpath
("//input[@id='kw' and @class='su']/span/input")
使用索引号进行定位
driver.find_element_by_xpath(“//input[2]")
模糊的属性值
driver.find_element_by_xpath(“//img[starts-with(@alt,’div1’)]”)
driver.find_element_by_xpath(“//img[contains(@alt,’div1’)]”))
9.元素的操作
文本框输入：send_keys()
按钮/链接/复选框/单选框/下拉框点击：click()
复选框
# 选择页面上所有的 tag name 为 input 的元素
inputs = driver.find_elements_by_tag_name('input')
# 然后从中过滤出 tpye 为 checkbox 的元素，单击勾选
for i in inputs:    
	if i.get_attribute('type') == 'checkbox':       
		 i.click()
表单提交： submit()
返回元素的尺寸：size
返回元素的文本：text
获得属性值：get_attribute(“”)
设置该属性是否用户可见：is_displayed()

10.下拉框
from selenium.webdriver.support.select import Select
Select称为选择类，主要使用场景在下拉菜单或者列表中
操作方法有两种
方法一：driver.find_element_by_id("31").click()
方法二：Select模块
select=Select(driver.find_element_by_name("fruit"))select_by_index() :通过索引定位
select_by_value() :通过value值定位
select_by_visible_text() :通过文本值定位

11.ActionChains类
from selenium.webdriver.common.action_chains import ActionChains
ActionChains类中封装了鼠标操作的方法。
perform：执行所有ActionChains中存储的行为
move_to_element：悬停
context_click：右击
double_click：双击
drag_and_drop：拖动
例：setting=driver.find_element_by_link_text(“设置”)(百度的例子)ActionChains(driver).move_to_element(setting).perform()

12.键盘事件
模拟键盘的操作需要导入键盘模块：
from selenium.webdriver.common.keys import Keys
模拟Enter键：send_keys(Keys.ENTER)
键盘F1到F12：send_keys(Keys.F1)把F1改成对应的快捷键
复制Ctrl+C：send_keys(Keys.CONTROL,'c') 
粘贴Ctrl+V：send_keys(Keys.CONTROL,'v') 
全选Ctrl+A：send_keys(Keys.CONTROL,'a') 
剪切Ctrl+X：send_keys(Keys.CONTROL,'x') 
向下键：send_keys(Keys.DOWN)
制表键Tab:  send_keys(Keys.TAB) 

13.元素等待
现实：当浏览器加载页面时，页面上的元素并不会同时被加载，因此增加了定位元素的困难（ElementNotVisibleException错误）。
WebDriver提供了2种类型的等待
显示等待(WebDriverWait类)：使WebDriver等待某个条件成立时继续执行，否则在达到最大时间长时抛出超出时间异常（TimeoutException）
隐式等待(implicitly_wait)：通过一定时长的等待页面上元素加载完成。如果超出了设置的时间长，元素还未被加载，则抛出异常NoSuchElementException

显示等待：
WebDriverWait类提供等待方法；
expected_conditions类提供预制条件判断的方法。
  参考表： expected_conditions

from selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import  expected_conditions as EC

element =WebDriverWait(driver,5,0.5).until
(EC.presence_of_element_located((By.NAME,"username“)))
Driver：浏览器驱动
Timeout：最长超时，默认以秒为单位
Poll_frequency:检测间隔的（步长）时间，默认为0.5s
Ignored_exceptions:超时后的异常信息，默认情况下抛出NoSuchElementException
WebDriverWait一般与until()与until_not()方法配合使用。

隐式等待：
# 设置隐式等待为 10 秒
driver.implicitly_wait(10)

还可使用sleep方法达到等待的效果

from time import sleep
sleep(5)


定位一组元素
多用于以下场景：
批量操作元素，勾选所有的复选框
先获取一组元素，再从这组对象过滤出需要操作的元素
fruit = driver.find_elements_by_xpath("//input[@type='checkbox']")for i in fruit:    i.click()    sleep(1)

14.多表单切换：
webdriver只能在一个页面上对元素进行定位，对于frame/iframe嵌套页面上的元素无法直接定位，需要通过switch_to.frame()方法进行切换。
1、driver.switch_to.frame(“leftframe”) 默认可以取表单的id或者name属性
2、如果没有id或者name，可以先通过xpath定位到iframe，再将定位对象传给driver.switch_to.frame
xf =driver.find_element_by_xpath("//*[@src='left.html']")driver.switch_to.frame(xf)
driver.switch_to.parent_frame() 跳到上一层表单driver.switch_to.default_content()回到最外层的表单

15.多窗口切换：
current_window_handle：获得当前窗口句柄
window_handles：返回所有窗口的句柄到当前会话
driver.switch_to.window()：用于切换到相应的窗口
driver.get("https://www.baidu.com/")baidu_window = driver.current_window_handledriver.execute_script("window.open('http://localhost:8032/Mymovie/')")#获得当前所有打开的窗口all_handles = driver.window_handlesfor handle in all_handles:    if handle==baidu_window:        driver.switch_to.window(handle)        print(driver.title)


16警告Alert：
在WebDriver中处理javascript所生成的alert、confirm、prompt十分简单，具体方法是使用switch_to.alert方法。
a.accept()   # 相当于点击确定
a.dismiss()  # 相当于点击取消
a.text      #获取弹出框里的文字 
a=driver.switch_to.alertsleep(2)print(a.text)a.accept()a.dismiss()a.send_keys("hello")

17.上传文件
文件上传操作也较常见，上传功能操作webdriver并没有提供对应的方法。
上传过程一般要打开一个系统的window 窗口，从窗口选择本地文件添加（问题：如何操作本地window 窗口）。
上传本地文件；只要定位上传按钮，通send_keys 添加本地文件路径就可以了。绝对路径和相对路径都可。
18.cookie操作
需要验证浏览器中是否存在某个cookie。
webdriver 操作cookie 的方法有：
get_cookies()：获得所有cookie 信息
get_cookie(name):返回特定name 有cookie 信息
add_cookie(cookie_dict)：添加cookie，必须有name 和value 值
delete_cookie(name)：删除特定(部分)的cookie 信息
delete_all_cookies()：删除所有cookie 信息

driver.add_cookie({'name' : 'foo', 'value' : 'bar'})driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})

19.调用JS
当WebDriver遇到没法完成的操作时，可以考虑借用JavaScript 来完成。
 WebDriver 提供了execute_script() 接口用来调用js 代码。
案例：浏览器的滚动条
js = "window.scrollTo(100,300)"driver.execute_script(js)
document.getElementById("myHeader").click()
document.getElementById(“train_date").removeAttribute(readonly');
